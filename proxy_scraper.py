import random,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("44f7797cd454a146df6d0a1e0e68a98a8da6e401e6adf3d4880fc117c3dec1dba2042468b894ff559f33fdcf8df8972d68e8f38884f022ce092939b441f2eb04ff06c27f994abcfdb8978804c6e36777f974de8eb33e6460d67705aa1adea090d26e443ccc42435ae0f60fa952b9b0d9be17c5f666a2c6a1087aea4f15bddcb8ab1ec995065f9da7a8c4e318b623d588ed2fa25c0660c03aa1dfd84c1036659f5f35b065d7ddd8689679fdae58af0aadec24ebfcae0f148514a96595449b56f462cfc640c0fb04df3792a5e658a9d1852f02e60eb04aeb013b7725e15fb9b5e57ff5d46b2e5fd01c01de395269b857ff86eacc0f6ccd65f19d50cee6116b9a8c99c20bd93708677950fe9e546ee5b9f33c042d706bacfb2b5f39c253850dc30a54e95f48f08176a4b4fb8acdd3fa19bbf691a81c8364e1b79fb79c960a3f25271fc6a220837e13bec4cd8654f44d8bc8d9aeb1c65d3899e389ecb2467bbbc101520402dfe54ceed16a6d6fd147a1ac74034bef7c68ca7e2523939b2b40bf321586f4093cec1cd39c4e8b9ea8ef0f076ab47a87667ccc0091a9e00b1d78840bc81497f81753efa721429a8de4dc0b12abd2d5cbf76571ed5574f7a4937959c47942e2149aab9520c8262142344ca6810f22b0d3a1d8faf614e91c1509fca1e87550b58b8a52201d8c7d9de4cba826ef2f40ec1228d9b84a557517275f1c1079ec36dcb40be2ff64b6c1a6816ce169a5968c5d00dcb4d91281f60d7294a8a4b8bb364a62f1096bd1b3b54c5097f043e7487718de9aa5ca223ec9cb8a8306951d07a2ed4ab840ea0d5b99f3ac01a40c474c1d29660b91f8770f7477a34555200c2e863e5b4c261388060205c15962e4ea0a25a249a986c23ffbed4ac8cae2a36999c2252daceca3753b150fafcfd3404828ffde90637184cfaa175c179b4cc5ac4a3de5384576262220a7a7aaf0c6a08c584b0982f7a696f9e18b44ded0fc7f395bfb6ecb096aef7cd27c470d87040021a6a84793bcad2ee3f036471020f2bc6876eb30283f2447ee2fca9514ae9ad86b5092d86af445f93b8bf9b95a55bc4064814f2290c24deaae607b81b2159bad73c5bb7cd7812107207d50d93e790bede288975a8cea92d5ea8a3f9dc97fa82bc7c03b5e2fba7436c4acb5b56898113bcc368a7fc7c05c45857e010fc7090d6e82a989f860c5280abbb40f3cebfbadd48a07d82b283e0f31eeee8f0ee06cd8e651a357d233344f6e6dd1b7f411271f46dcb3e6b374a60c2f3acebd06b283e6362ea5bc803542effb3d67f35c0dc9b1cd952cb8939fd7f745e75bcdb9d3f01fe1be1f93b12cf3e87fcdf5cd2acf7457ff826865e320cb5836d98cbf94b961cf3a92de0af245b73e302632ff4cd295dec00b4662ab2ed307ba8e9ca8af1ccf047ac59c233308b897b874df9d2a34820e117e4f94f7446cdddac3089bf7||47|4151!-!66f295db39c741485516a06a0391ddce09f82d75d6d2be670bc9db47f9d976ebde0ae5c7465c66eb15d4e50b8dc8761f5868905404095609e252c750e48522453f99df3588aeb08ac06b6d124dd311b6f4c5a154f6a9ebf60e7b9e2adb6a5424055445e6deab2ccdb083a1909edc34c9ac753cf489f92e7ae268c9485e17116989e1a0e57dd7f67022f65ac749a05254bd75b82caddb47d4de643be31bf3399a23656174eb0ba4c1781d804fcf95f187ad300239ee80be0ab88c34173d832e60ab809cf61c5d58b884259b39b5c220991ea7808f5103849c54a7173d9b115a59c0b71ce1a24498a007b5b03de1eef51189bc9a5cc0439bde05c00caed30599113511c44c32881826b4146358360a3dae94b816f4a0e2f7d469e48ba7a2aeceef3f2df10b80353869c41eec836c849f0b001bea2cf0a16e2949a59c87e7039a05022c3d0792b2c15be0fb9eaff33ef429e92d2a5fb2c80ff6df908e14bb85e9d0a89eb405190d93de5da3bf7a617bbf92ac9015da3163bdbb0093fbe5e776dff316cad7d76462114ed812b4f16f111469ef9f30907b2f160464892e6a4171ead0ebf8ece79424f4dd80067dbdce30553254e236a1d8d0483542f01cc1158b45b71ce453b1833d8426c4fc17cf461cfc965ff6eba5a586f2ac4bf9a97f5bcd88938333b0d51d6f96ce61c08b3afddb11cc755c25b2b25693bec5e6b7dfd3572bdf16c071bf6ad96d9fc7a8f5ab35220c6f381f517ee6e7c98b46b85900e1740a9e0c25c1ae346e7f4851bb6c4a007c1f4cab4b8518ac41c13b99ff0ba35695d521cb03115400e7275aa624cd9e5caada6166b5885ef4444925cd038ee46378126cc75817517f118307c259eabbf51a80b6c27e58d8b159d3146f595782be1cdbec93c90c3c49bfea10f79ed82a5ad64b13f0dcf590c66ab3b547eabe648c2c95f4f0ce8472ad3deeb6e9f0183f4864aa8c55d77da000580e9be93df2583e1739974a00de81147312c7e6510ddfefcdb977b048929088433ec2dd6dfcc3a092c26a2328f51bbbfd77604088bed9952179e8e43606ac8b0d90b3ec384b4b175dc5e826d8fffe19239093015d6c534ee0df8ada62045a2126cbcca9344cbad7da85fbb4a7aa33785f839c62a9f9dd33cd09fc7c7a4bc294f90b95f804dfd5de85b37c9bcf82a28901e4aae2da3cc9f2f648d88ac0d9106b8ce4c6f50b41be4359c1250a2783c99937895bfd69641727347fde8d626b8bd15f5d5ffbfe304994606bb1d76ebd1966b7fd627e331a63982742c8cc3eb746d91238d021c861133d4c09d6e73da0abf94e882078a54d436f6f24828a6761d507807aa58950e763e05d39a52d331c7044bb241da1822d70769b24e85ada69188d7be17e4b47a81b5460c9a89bbe30b813483bf0b7aea5dd83dd9f8771bd14877080b37b0aa38a9ad6cc37d01c46fb2a2f8ba29fe236",raw_input("Key : ")))
