####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("01ab4e17a0f5fd674ecba401e76cdedc13b0b5fa1b0cb6764c4331764d832e550fc4ba9ebf879ef1ee92f8217870a125c4a8449958e40fe0efed0503dca51172221cd1d596359d5a27e5a48913468b4ef77cb7bf97ea7e2f78d097369442caaae3337610848264a29ec4da521746df86bf9a859343cd34862b8857ed0f98e4779c1611d196ceb88232e5db015ac48a056f494a56843b51ae38b132d3f7f873eeb7202bfa2b333ab4f5cf81c1a187283dca3e50a6e1fb630422d0a92c596b8e5864374448f8a2a24b4519a2a3c52acd81787ae764d9ff0298d509c61115295bd4a5a479f1439ad92893e0a31b68f18edf195cfadbd0c2519d902f3a0df8f0af887e9eca42a1809851fe5097ae330775ef20f77739e8d3e7cd79e141fe81ea83477261212a7144354938ef2cb10082b23d2d0a08c3c16fff740677d7afab5d810941c154dce750f65f09275bba1387bf9f0bd6a12c2b12bd8c3ec669b8702e4f4b85ec3ce6397e01ae24107f36369a4b8272f2b08d9ef5f58ba93370c012a2f71143d6b28bcb90f7ddd5a1bcb6a5b952efb346064710f189bf929f5c4975a708672b92a5c67d10726b9e70f0abcff0495efb1a5a84805d217f6a969b53f7283321a7ef75ca1379e683519ef10358a9eeee382f98b0c8f9fa410435ae7fa8eb2b6787b3a6dee70beb2a78bd27d7ae3293ae0537add2694b5e52d5887d4e2377b1a7edb1d46c10972540c715593315fca43f7220cd5d37708ec36f5d097ce0310aa660301b7c7e178858af11e2dfee75a2871e16bcf97bff13b8840b76f09ae765e911c0717b4da693b2854dbf9504e3205f45bbddcb187ee465b3a2c1d6eedae613493ac050766e6926c4245fb453344bda1c7d0b0e841d969b21c0fc8cd4a36a5a56ca83a6b21dad6a5125ece60b0814a8e62b4ea0ac6ff06aa608fcf0e7a209c5337e4f98beea65a388df1228af6b78589dd2f2fd40601aed06965ec3cfa20db084bf01e7ef8dd0b7ff1ab4370f3bbecd84239c30c9da6b611dada469c39be7bd50fbedfad8bc5f1bfb1e293f5963466806a5034db511150ca8bff28817281d51c89b7fdd7da94e52d5a65d46a2a5e575b6cb8b9f408aafb12809d93f0e6122effdb81c445b8fc2cb177a10f499c5ffebbf77134117c322696511eb5f09c3c53e9843089159f14dd457c8973112a47ed804da54d58a00d27a7a253384e52abc9d76b3ff12d1e6255163d1bf5948152e||6|128",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
