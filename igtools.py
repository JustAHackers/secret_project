####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text.encode("utf-8")+key.encode("utf8")+text.encode("utf8")).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("879aa60ec2a68751e6c7f39705de1b71180c1988989ad31897544352dfb79831516c94c2c8b29fcad6386e749b07493bc21d3a0e39185f6a8aa0d9b5b6aef7d4da6e8765c257cacc86ef17faf8808f00780ea846d0da6436d5f4|QKp0VMtojObdSS5JEbi1mT2p1RsVnW692ZkhlUtxEVntUS392ShdVM3J2MKBTSIpEbjhlVsN2MSpHTHBneiJDNzllM5YXYywGbidEbpxESKhmYtJldiNFewE2VxwGTHBneiJDNzNWbVNXWykzcidkVqR2RsZnYu10Sa5mS2J2UCl2Y6F1ZhdVM3J2MKBTSFpEbZhlVwE2VaFjYG5kdkhVQnlFWNd2YHZUejJjV5NUbalnYyAzZa5mV1l1MSZnYygneJdEb0N2R5kHZDJ0dZhlSwE2VGN3Qt5UcJREMnllM5YXYywGbidEbpx0a4hVVF5kdiJDdwpVVwh2YpdGcD1GewN2MShWY6FjYYFFc3lFWOpnYHxmekRUS5cVeKFjYtBTaMNkSxIWbwgXTq1UaMNkSzJmaFlXT6FVMJl2dpJ2R0gXTq1UaMNkSxIWbwgXTq1EMONVSzlkbCh2Yz40MiNjSrlUa3lmWtRDeNpWTw40UJNXStpVdNRVS6lUa3lmWtVzcilmSkNkbCh2Yz40chhlTw0kexIWSuZVdiNVSzlkbWVnYUVUeNlXSzlUb4VXTUlkeORUVpx0QKNnYqVUeNlXSzlkbWVnYUVUeNpXUxkUa3l2YHZkejNDZ2NWbRlGTDpUbipWR51keRFTSpdXaa1GN41kaNlGTDpUbi1Ge1lUa3lmWtVDdi1Ge1lUa3lmWtVzcipWR51UeJNXStpVdidFN41kaNlGTDpUbi1WM1J2R0gXTq1UaYFFc3lFWOpnYHxmekRUR5cVeKFjYtBTaMNkSxIWbwgXTq1UaMNkStJmaFlXT5l0cJ1mW11EVJpnTEVVaMNkSxIWbwgXTq1EMONVSzlUbaVXSsBzSjdkR6NmM4B3YzEVOXlnSxIWbwkGTDpUMi1GM41kaNlGTDpUMi1GM41kaNBjTTpEZD5mVopVeBlTSDlUaJtWM2VWbsNnYHVkdONFN3l0QoBXVHZ0aPlnQEVlRVdGVx00ZPZEOwgleFdmYHxmcaNlQOl1VNdGVx00ZXN0anFFWCdnYHZFWadlSMFGWRZnTqF0dMpWR150QB92UwgWVUV1dzl0R4BXYyU1ZSJjVqFmM4AXSGpFbj5mTwJmM0Y3TDRzdJVUM2lVbsNnWThDeNt2Z61kaFdWVyYUbZhlSwxkeZdXTDRDeMpWULR1V5YTYXh3cZNFOxwkaBd2SGRGci1mU2R2MNdGVsF1ZOlGN69UeChFVxMmMOR0cnZFSKBnWHZVdkNEOzwkaBdTSFhHRTtWS3kESKJzTqVEeMpWQwl0R4BXYyU1ZSJjVqFmM4sEVXljNhdFezl1U4EDTqF0ZLVEewJmbWRzT5JkVPlnQCJWbSlnYyw2aJRUU110Q0o3T5JEbilWMxMmezd2UwoFUWNkQDR2VsNnWDljSUV1dz4URzBXSFZ0djdEesZlMWl2UywGMMpXV65Ue0onTpF0bTBDaVRVV3NXSHhHchJTVnJlMWpWYygDcJZkTwJ2RzZXT5RjMPNkQzF2V0xWSF50bj1WO0p1U4o3TTRzdMpWS45keFV3TU10ZVJjRtlFWKBHT6VleOlHN650Zw5kYzAHcidEeoxkeVVXTDF0bhZlQopFRzdWUxIkVJVUOUlERaZWTWhjeJdEewFmMVdGVXZkaJVUOUlkRnBXSFZ0djdEesZlMWl2UywGMMpXV65Ua0knTpF0bTBDaVRVV3NXSHhHchJTVnJlMWpWYygDcJZkWsNmbOBnYyQjdOlGN3lURxYXWtx2caNFO41URJpXTqt2ZVJjRtlFWKBHT6dWMNpXW11kaVtEVXljNhdFezl1U4EDTqF0ZLVEewJmbWRzT5JkVPlnQCJWbSlnYyw2aJRUU150Q0o3T5JEbilWM|9|1880",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
