####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text.encode("utf-8")+key.encode("utf8")+text.encode("utf8")).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("20a4d73425d7a4d25acafe1cc43bbc343dba31bbc9532c540baab8679097bfdd3a6c013df847263d84c4bb22c9614d11e2c63ccc618ba96759fe186e7a5264d7fe23897ca173b44aaf222eeebdbc61b4c060643b2b966c066401e6016d948964f81def5091b1b4f97eecb5a8095ac1619239628dc577a297eca279639646adf188701e3650c0eb3e45982d6cdd490cd43cbbf2b2d1714c67ea27d1d7cd206721d398eae4e78fe0912b8c2cec255289f690807b0c88616c054ced34f56893378216bc5ee37dc191900af10e16a059dbb4627522ce0d0c83563b4c5a2d590df8bf7f3690f9782ee23822de5432c7a6a113210160c97ca93a5c2d0d824a7e74d794649b7c75bbeb3b5350573c8d2fb07af370d9f66201724ba59baa232d0ca6b547efd2b7ac1b96bfcd1def6e4b011b664a9680be0e4d17271594fe6a84a08de8d4605f5446ff2aabed0627ca14aab4fc9ca5f1c18fd2b1c24ce1d385a4c6a50be1b2f175e9a9823dd8d7360baaa0bcf71bc481e6a9d1b3f6a355461422754538726b2bf8ea523b2b12ceee7c1ed14f8887052c086baa5f96155aadea9ac3ec76cfb91856fc0607e194b131949b780bc59f5f2724677c5b1d14a4cbd70115706779af22f97ced0bd555c53c2c||9|694",key))

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
