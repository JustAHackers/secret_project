####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("db2f3553339e76a2d04ade0bf188080485716e13a6c1896d2837ef7662358329e6197f30923d6ccbf0de829569a0d094ea3f6aead50bbbe7de2ede595c756719d4d935d5ffd14e629d99195d1fd3386e496e5e52f45ddf32|nl0QBdWSDF0ZJNkQ3NWbsVHZDdWaJl2aLN0UCd3YtxWdkN0ZpV2MwcmVY5Ebj5WTnFFWKxWSFhHchJDb1pVeCRkYyEDdadVNwMWeCdjZTlUda1WO5J2VGBzSHZEdiNjV1R2ROxWY5hXdZdVMol1V0FjYptGcDd2anplMWBzYHZkejlHa3NmbNB3QpF0ZJNkQsJ2Rs1WSIxmdkNVQ5A1UBhXT692SDNlQ1l1VxgWWXRXMipWS5MWbGNDWywWdjhkVws0QKZ1YyYVei1mR0p1UBZTSDlEcM5mT3J2RsBzSDpEOJl2aLN0UCVXWXFDaZdFdxImaxIGWR92ZJNUQnl0QBdWSDJEMhhlQsBFWKhGZxkDci5mQxQ2QnlGVHljbMVFb1l0RKVTSH5kdiJDdwp1UB9WZTlTdLNVQ2k0QJB3Qnt2Za1WO5l0RrdWYXRzZi1mR0l1VGJHZXRTePd2bKl0QBdWSDJUdZdVMol1V0FjYpVDajhkQsJWbR9WYXRGMiJTOzNWe14mWYJVMjJjV5F2VR9WYTtGcDd2anJWbGRXWXpFcidUV5MWbGNDWywWdjhkVws0QKJUWy4kdkdVNwkUR4B3YzE1ZPlWQptUUvpUSHZEdiNjV1RGRxAnYuF1bj1mRzglMsV3YIZFMLNkSCJ2V5EjYuF1ZPlWQpt0Urt0QTJUeahVW5MWbGNDWywWdjhkVws0QKNlWYpFbj5mTsl0QoVDTyQDcJR0bnlUart0QTJEaidVOxImbSpmWXNXONF0bKl0RGJHZXVzchhlTwA1V5cnWXRzbi1mR0l1VaBnYHVFcM5mSsl1VR92STVjejdEewR2R4BnYtZleLN0aLN0UCBnWpFUaJlmQwJWaChWYzYVdidEb6RGRvt0QTF0ZJNkQoF2MWVnYHxmekNUN5p1VxYHZtV1bJlWSwN0ZrdWYXl1Zj1mVywUb4ZHZyYVeLN0anBFVwcWSutWaPd2bKl0QBdWSHZkckdVNzFGWOBDUXZkckdVNzFGWOBzV69mNMRlRkN0Zrd2YIpEci5WUnt0QKVVYHZVeaNlQCNWbVdWZzAzZVhkV3N2RWBTSGpEbZdlU1wUa0UXSpVTbiNjS0lFWR9mYHZVdLdkRyR2V1MXYY5EMLN1awN0Zrd2YIpEci5WUnt0QJl2SR9mSJdUNsVGSS1WWXx2cQZFdkN0ZrdmWtlTeJd0anF2V0cWWXRXMi1GewN2MRZzQnt2ZJNUQnl0Rs1WSHZEdiNjV1R2ROxWY5F0KQNlQoJ2V5EjYuFlNDd2aKllbKxWWXN3SDNVQnl0QBdmYtZ1MadkRwkFVxY3YHZVdLdUNoJ2VG1WYXhHbLNVN5p1VGt2SDtWdjNjQzFGWSNXYXVDbjl3ZwN0ZrdWSDF0ZJdkRyR2V1o3YHhHckRUMwxkbOdnYHxGMLNkS4kUart0QTF0ZJNUQnlVb5ADUXxmbkdUO2JGSNVXVyYlejJDb2JWanB3Qnt2ZJNUQnl0Rs1WSIJFcjdUV1J2R5MjWYl0bLNVQ5A1UBlWZTlkNDd2aKlVb5ADTt5kdiJDdwpFVxE3YykTdM1Ge2l1VSp3SHZkckdVN6N2R4BHZGNHeYN1aLNUUslmYzEVdkhlQrlFWSxGWy4kdiJDdwpFWN92SR9mSDdlS2R2Q1A3YxkzciJDZwJmaxU1YuZFbDd2anl0QBdWSHZ1cjJTV2MUaBpUSDF0ZJNUQnl0QClmYzEVdidUOuF2V08WWXRXMi5mT3J2RsBzV6JEZMdkRyR2V1o3YHhHckZ0c4h1Urt0QTF0ZJNUQnF2VZdWWtlDMM1Gb6hlM4ZnWywWdJREM5kkRSlHZXVlNDd2aKpVb5kXSHpkakNkQwJWaCVXWXFDaZdFdxImavt0QRt2ZJNUQnRGSKVzTn9mSDFFbpJ2MRV3YtZ1diNjSwglMGpWWykTMi5WUvlVbOBzSR9mSDFFb3NWbsVHZDF0bJxGd3YmVwcWZzAzZJRENnlES0lTSpVTbiNjS0lFWR9WWXFjdkdVNwklMWJHTHZkckdVN6N2R4BHZGN3dYNFe1l1VxgWWXRXMipmSiJWbGRXWXZkckdFN1F2V1smWYd2bZ1mTwskVwA3SR9mSDNVQnl0QCxWZH5EbjhUU2M0Zrp0QYJEajNTTLNUUshmYXlTMi5mUqp1VzRHUTBDeDd2anl0QBdWSHZ1chdVWnlVb5ADTtxmeYJDe2plMsVXSEBTOJVkWoJGSOx2Tn9mSDdVNsRmMShGZHVUdj1mV0J2Max2SHtGcDd2aKJ2MCxmYphWdZdVMopVbsNnWTdXaklXSwxkbklXYYJFbLNkSjJWaJVXYtlDcilGa1pFWktWWYJFaLN1cph1R0k2SR9mSDhlQ5F2V1ATSDdWaXlnRklkRKxmYXljMhdVNulURGpWWykTMi5WUn9UaCdjZTlUda1WO5J2VGBzSHZkckdVN6N2R4BHZGN3dYN1awN0ZrdWSDF0ZJdkVzF2VZdWWtlDMM1Gb6hlM4ZnWywWdJREM5k0QJl2Tn9mSDhlQ5F2V1ATSDdWaUdEb0FGWRdGVHljbhdFNnl0UFl2SR9mSDdVNsVGSS1WWXx2cM1mR3N2RWVnWDhGcLF1bKNEWSBnYXVVdjJDespFWB9WTD9mMNN0aLN0UBdWSDF0ZadFewpVaClmYzEVdhhlTmJ2R54WYXRzZQRFMnlUbO9mWX5kcjdUOwJmbRl2Tn9mSDhlQ5F2V1ATSDdWaXlnRklkRKxmYXljMhdVNulURO9mWX5kcjdUOwJmbRd2TpJ0NmNVS1pVb5knYXZEMLdkRyR2V1o3YHhHckZ0c3h1UrB3QntmSi1mVzo1RGBTWTVTeadVM2RWbV9WYTt2SDFFb2N2RWV3SHVDaidlRtF2V4xGTDp0MJl2a1R2MKBHZHV1bJxGe1lUa1E=|8|2918!-!123d6501ef930f870326bfbb8847afbbf86d23204c30c093f13c0a7a0850735db2514657a7ba8173e74a8159596db2bb3f982b7ceda7b9519e570e2542526629fa935b3dd589ede49b2ecd11f7e298493103f4b904a6dc21",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
