####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("22ed25ba5fa29208a5534c0898984d6923cbc1f3bacb9314ac16a94c93dab3150242e04f4fbaf6312b8bfd59a74330cb87d9d3e1bb87fb073f10f81af94f7895dd618bb70eb1aae77da2a3273d4716d9d1fe261955f05bd30aa01bc83c14eea2c19d7a217d1c3b71e27dee654d7c238cc8cad82ad4006e9f45cf3fe6e6ba01ba3de52953f98b3233164eea7426e193cf196c956be714ffbb984426fe3ee6b33d25e11db678e45e97d19c424ff4de6120d5dbd4949906ae0de3fb4bf9a707cdb99e0de4fdb22653a42dcd68ffd50fa626a8d1e9015a8a937e1dae28edcd092c63354bb58658eb3f1078d5ba543afdb6ad2b0312efc195928ba651aaaed4a145267db7ad529d23f33b663c09bb8a205b17bd0d69e9d8030ad27b5a0c4914cccea9b8798092f0a3264533fe489edf4091df782c0aa56c1c8897a6e335597f9ebde326078bb2ab0ff78c27d4e8c3f0f0eb312335e3bf2a2b702b8b4c4140b28ad41edc17b3389422c7090b60e8093ebd0aa0c0c030d1ed342a0dd4e34f15d2030a6b06183c68cab64c711dea35bd6999f10bc181e275f94199d89cd17f4303bfdda89acfc16e681455e5d4b384c2de46c3e8b0720b68c294882d032eee71ded4515eea7a3f1dcc07eec6d11ae8db483f29e1e94d9e19a4dc7634a11d98aef373323eaeb40c9e466186fd1aba8e20fb653c1e4b0ee62bcbb1e9e864c0bc680f2b22d9c4e333a6bba644ab0e7abbc5a226af0e0265b397982aff6fe78a8703cd16f97133af08068a2e3b8c||24|1360!-!6374a288e59db1471649e011b8af9b29ee9950bb8a60d1ec2a7346830c5caa5e84f0edec28bf2133c0cdae75c7048b8152e1db305b952cf44cdfc53bf9cda52f602b8cc4e7a87a4f73abd81a44b048fd3bda46c43a8d6bed9616e379585d2de9ef8a0abc702f669e72360581e1439085dd87c46759add309166a6b7a84d6344380a61fc23fcad700e87585f7a5cbb12bd460c2465a42fe0395f1e09137ae4e62f41f4c786c62cba74cfc131fa044fd0b7a446fc1575e18292ad931e6ecbbd3dbcc6ba658481ae1e83efee431221277b9b839c853b475b5ac3fd280ba9053e3a495e35af899d49000407c112021c81e59aea6edcd25b8dd352adada8cd58749159b8bf69d04217c50da3929f55ade8acbad73252af9addc9d07e9cdb58582119f315970b26c6258e0e345f05e2dc452bc4b9eebeb255a8d87c16a82e96190c7070c39c34c7e0bb0c6b6c99a18e9d030e14f183826e75fc40dd8852afc3858343b2e35fb40b56dd8da4aa3ba64d43a6eb0843e1442b32a984ab4022794bc1335cb32550a692970bed45e1a5787aae1e21269aa6e3f41ab18b2cbbbfaf70b39b391a49a402457a4f437350937661866bfb1bd374d6c0d978b0e5872109aa27b921810a3fb384f1d332e638b091d606c6aa859736b83dedbf589dce4db880f2a73b84f054d3e8e99986131544d784263cb974fee3213f4722fd85e9fedc50dc2fa4ba8ed61ab2cfbfdca3cf40b599b81b96524e10ac38147f5848133d23ddec3eb698c050ea721a7b641",key))

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
