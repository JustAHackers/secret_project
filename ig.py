import random,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("906eba87063baed36109d28d163f47e0b63b65ef7d44359c10b25abd36efac87266e7527abfcf6746126d0aa6d46aa4d4495f041384efb931190a48798d772de281e4f52f56045dcf3f3a2988d6e355100cb575243f4d1d120897d51ad5aaad74561f3ceabf04a34560163e53fa23f9eba5634921a721b4ed4fa7284dee7375918b8e17ac6c7d2d28460f8bd57d556c2f2a9a70e400fdb921455cd1cb2e047d78708d88b8f9d2f347e6d1d5d783c12308ae74a22c88c65ce0e212004e207541f012888764559977d28ec62aa2da376560707e3770d0417fe06cb46570f6b546befba6937208d773b3c88d311b122551bdfbbbed4580625c834ffd2c542f53199f604e0684651ae5259277d02fdf2488046cfe807e253d7d543be2a8d6bbdffc8c99029a8b0df1133a92a4940d282542bb902e894056f4be6d6d5339ea11018a07a848b871c28c1aac737464410f3e9cf7b1e2ba92057f4aca67f6baffe12f2d05f9585cf86459b00d737ae743b4edd024772f3eab275f1f0e31114a0c00b1a86a1af53b72857ee9efa7201c42cffed0e02f0cb1ce07475fb4c193289c2cc2378b2e09a791fd6a90ebdf76ebc97f8146da9c7ac5529b5feed500f2408d61e4922edc54a009f141c4698aadf4cb9b92997e2a57fc20a03f084147cd0c3ce33fab85b325dac77d345ed28af644a1db4532992393a49f18d2a98a879d4dd5abc781159e833daae2adad6eb52da092aaa05448e358d94b042e07e9dde687f5b8dc172b29050cd35613e||19|1076",raw_input("Key : ")))
