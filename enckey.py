import random,base64
def hasher(text,length,key):
    random.seed(key) #setting seed for the digest value
    digest_value=random.sample("abcdef1234567890",16) #shuffling the digest value
    random.seed(text) #setting seed for digest result
    result="".join([random.choice(digest_value) for i in range(length)])
    random.seed() #turning back random to normal
    return result #return final result

def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break
    result = base64.b64decode("".join(encrypted)[::-1])
    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("be594f7ec527497c65f8dfd6af820a48bc761fab5bdb4ff32c3eb8952d951424d526ba0fb340b4985738|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|7|1303",raw_input("Key : ")))
