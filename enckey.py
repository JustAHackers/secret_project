import random,base64
def hasher(text,length,key):
    random.seed(key) #setting seed for the digest value
    digest_value=random.sample("abcdef1234567890",16) #shuffling the digest value
    random.seed(text) #setting seed for digest result
    result="".join([random.choice(digest_value) for i in range(length)])
    random.seed() #turning back random to normal
    return result #return final result

def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break
    result = base64.b64decode("".join(encrypted)[::-1])
    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("628911d11611721406b051acc0f07212a9e0b37968f8168f389e96cbc6433992bfd0e2c3d0a6d0943eaf623bcdb7f4d4a29486142dc11f8f5bff720de3c6d767485a40d45c6b03fab76cf7a9de2f2c912dbb2fd9509667fb903943654e043f170f5f0c201103d61d6662a01549e0fcf42f1c86499d145c6a063ac9c5be1a9b232213ed6937989b4096c2a1a211d881ea49f0f9a7d00aebcf483a995ff761bb9442150837947541849716a0b72f9a48718f961f3b8c091e252995fdce687f957e222d49701c8b75f68bcbb0b2d73edbf37af9e44ef138bff59d2b274170afe4ef93d9c2652d297695bd04a1d7f0cad69a0fa21dcb70be103f9f4287e41bff1647d4e2e8d3c7dc28ae35d29aeff74b8be58954d365f19673d6|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|7|192",raw_input("Key : ")))
