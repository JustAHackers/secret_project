import random,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("9e5c199f1a09e87d6bafe5059a2eb5c96250055fc14e6e8fda08d1d4c436b2c31be89f83a5d4c4d37ccd3a4aa182ee6ed00bb6da498ce7763b4b3a3a4701d7b63651a04218edc89fe79c52070259d3f40f5e9ebd803bf043e7777edf8114b61263b9cca7854fde5e783f93ebf966ad47571c716875768b634a51bd2e04806ae20e29e067c674a093be784c91a1c24298fe71022faf3f1bbe1d4aa2546290e9c56c16f547e89a4b0ca2f9a7e2be4b8725d3391fe8d4b889706f1e125562cccac01c795398c23d5811fc5afae4732769471354ad2b0b18f6aab5656f764468aa349fcf24c51cc1b81ffe2829315ac8113cfeef40f0f62e5ec4fe9802d82dfc09e3067999f6c0b8d161bd5d16ba97724a88651681c0cb166ab2141c41f90e7add58b8cbbe1e2b65e92499dcc3f55419b0196b7003bcdb275cd6b0a54a0519e3422581868c35dae1e856950bec51c098a98ccf7dcd82835233edfc597e31f3116937f4e9145888023264807d02cbc3ee8d16bb4c4709a3855d8f6a8477cb33f4417021a866be72602a961cd3e240d92d6109f821ed67a4c46953711bc10050d5d7caad301664c38f0450d597f5c6fe50d99a1c2148ac4467e4c1e5a66689912b4071a52c0c01775e672b1610eaf3f14d472a53e01c486171d2783d4266706966af5fe986336eb95482fdb94e0f874c16bdbb2c686ab3a878c3edf898c0d5b14d75e4af5fdbb070eeb2fd5ef39a89ee58be5fcc674491a52|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zlUbsV3YIZFMYNjQvJmM1wGWyUTMidlSsNWaJZTSIpEbZdlURJmM5M3Qth2dQhlSoRWM5AnYuJUMkN0ZXVldOp3Y110Q0o3TElVMMp2a5lURxYXWtx2caNlQyY0ckdEb0p1UnB3V6JFZLF1bKF2RRlTZ5pUSiNjTJZVRx0ETDJ0chdFdslURkxWWyQndLNlQEFGSKZnYqJmMSh2YHZUNidlV1RGSNVXWykDdMJjRwNmbSBnYTJkQjhkQzplVkxWWrRHckNEOx0kejVXT6l1ZLVEdwkkavlmYzo0aahVS1llM5sWWY50biNTQ1llM5QXStlTeadkV5xUbShGZHVUdjhkS2pVbsNnWTlkNJ1mV1MlbWplV6Z0cTdFc2FWVsBHZywGaWFjStlVbwQTYv5Uert0QXpUeadlRyNUaBdWSDF0ZJdkV0klMWdHZXVVdidUOql1V4BTYXFDbLNEbi1EbwA3S5lEbNtWWIFVaPlmSwoFWoBDTygGMid1dzlFWCdnYHxmaZhlUqJmMwkGTDpkVjJjV5xUVG5mWXVDMJp2bpR1V5YTY6JEZLN1cpx0UJJ3YzIVeLhkUwJ2VVVnYHljaZdFeIpEbZdlURJmM5M3SEV1dLF1bqR2Q1QXWYF0bjNjQDF0ZJNUQnl0RGlWWxMXahdVN3RGWSZ2YHhmdi1mVyQndkhVUvQGSoVHWyw2aQNVSyRGSoV3S5lUbZ5mSnl0QCBTYXFDbM5mTzp1VWd3SEVFcDd2bqlFVxIGWDtmNDlWQnl0QCp3YHZEdLdEa3tUUv1zJoUGZvNWZvNFMoVFVVd3cJdEewFmMVdmUyYlahJDOwlURO92YwY1TSZUTpx0QKhmWtpFcidEboR2RWV1YtZkahJDbzAHcidEeoxkeVVXTDF0bUdEb1RGWndTSFZUdahkSyY0ajlHatlVbNB3QpF0ZJNUQnl0QBdmWtpkaXlnSR9mSZRVS5kUboBDZIJkePlGO2l1VslHZHxGdaNVN2F2VRdmT5RDeMpWS3kkRKxmWHFDcJVUN2R2RVdmT1I2VWVHZI1UdZJTO0xkMGB3YuJFcidVV2llMoxWW1lEbwkjYtRzSDhlUp1kaxknWYZUMahlTwMWe1cnYvl1V14mWURnMQdVS6lUa3lWVtZVbahlSsNWaJZTS2kUbxYXWtx2caNVMzo1VJlGTDpkekdlS0FGWSZmYsNGbSVzYHZ1TZdVMslkavlGVVlzQTVFeGhFM4ZkU2llMWp3YywWdalXN3JmM5MXSHxGdjdUO5R2QCVVY5pUODdGboB1UK9GZIJ1djp3b2xkM5knWHZVeM1mT2p1RGpXYHlzdM1mT2J2U5AnYtxGMVdkR1I2VWVHZzEVaPlmSoFGWKBTYXFDbM1mT2p1RGdXWYxGdadVNrlERjVXTTRTePlnQTp1VSRXYTJ0TiNjUslERWJ0SpVlMWVnWHZ1aJZEd3YmVwkGTtpldj1WMoR2QoFnY|11|40!-!7f369ae84d7c35d4cc5a1468dfbffc9ba828aa2a7be5b14830cc8caf743c8481c79dff59cd53dbf07f2e185b53bb02e3f03355a6557b3ce13bc854d41a4437d3b05684109d0d0a804df97d3aa00476e99cdfe08ca69c5df06c77a73ce0efbdf98364d4d28f6881ffcd355c7a4b932a5028a5bd565c7a63f72e2a9ea1457a52fee8fcc2fa73c3d388ef26ef34a546cf4510fd59ff0cc789a7d1a1577457a20adef346a54d6d8ed07203e386294a4b3102f7eda3650dd2cfb642b8b403d64c9f48078670a5f2f83d0653ace98361f7a5cf1112bfc0d041a3de0cd028f14a8b1714155250b810ba3dadb5451992149a6a7230f41b73dbca5d38f56d7a2d6e3dd1acef131e05409feecc7c7eeed546aa235f974e5e196a73606cf2abf92c20c1f3eb4abc9f0b8d643596d34849f6c8dedced8da8da88a0f9bd67fd58f37d9abb56e392ffa0bb490c8df89676c21e502533fb6906da63b63cc56a44ae98226ee48254065af93776efc1bd832505c94ae62b2391f59dbb89fc3b8ee2444ca9f586195ba2c600016abbb1b826c2978f3d6f08dc68973d86c1facd48b31b7751b934674fab4566e346ae0a42bb383483a1f31c54ed3addd71277bd4a55feabaa7739b97b0d41228395cdc9da82c0e349eb27bf984a33bf1e9606be2fd80846be1db56b0aed6a7b092833a0e716061c65dd3079ddbada8a80f8b0d4202748a198c69589fa5d14e6340b312de5bd26df4aaa8baceb1056cf504ef",raw_input("Key : ")))
