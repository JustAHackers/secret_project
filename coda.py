import random,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("c199f1a07d6bafe5a2eb5c96055fc14efda08d1d36b2c31bf83a5d4c7ccd3a4a2ee6ed00da498ce7b4b3a3a4d7b63651218edc899c5207023f40f5e9803bf04377edf8111263b9cc54fde5e793ebf9667571c716768b634ad2e048060e29e0674a093be791a1c242e71022fa1bbe1d4a46290e9c16f547e8b0ca2f9abe4b872591fe8d4b706f1e122cccac015398c23d1fc5afae27694713d2b0b18fb5656f768aa349fcc51cc1b8e2829315113cfeef0f62e5ec9802d82d9e306799c0b8d161d16ba97788651681b166ab2141f90e7a8b8cbbe165e924993f55419b6b7003bc75cd6b0a0519e3421868c35de856950b1c098a987dcd82833edfc597f31169379145888064807d023ee8d16b4709a385f6a8477cf44170216be726021cd3e240d6109f8267a4c46911bc1005d7caad304c38f04597f5c6fe99a1c2144467e4c16668991271a52c0c75e672b1eaf3f14da53e01c471d2783d6706966ae986336e482fdb94874c16bdc686ab3ac3edf8985b14d75e5fdbb0702fd5ef39ee58be5f74491a52|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|8|40!-!cd186b6ebcadee90aa61ec91377c4bc02fadd7cd5a6b5a7758dbae863cef8aec5c1013cbbed71c6c934cfa9db5584cb9ac32e58b1dd9da343a3d956805792ccb6acb37c838318a25369c893ca0a4cfb65323e306c325db822334fa43f559e2e387839efdebd75c7b228510c760f7f5c4f9801488d2fdc2e386157b9955102caca97fd06b4ba4a16c8326ae7889daa7792e742018026fbe8d75ad52a8ace784bee1c5bf75ec88c3ea3addedb4e2dd3ceb42b11b912c064c013924da349d5d70405d438af02425fb92a151df84a0099092041a5ec060c1b8f1b126a79a0a302e62c6264b20b3ec3fbd331afaa7426848b15ac7ac9990d0a214a42c698ca6f24853164d7fb2ffe8388f5f4d41420548613d25e44e4205c72a908e86804f748d62c25be6bd121b57c1eedbaedfd528b7594bc894f1e76fc32266b587aa1c1042b66a75daf9f789fdc1fa6905904174f652e3ab6a0948a885ad897cdbf3a2d2b04917b9a0ecb8b6c005566c348aef5b9bc5f32008dadd588f09f33a196fe15cc80170be8a261c",raw_input("Key : ")))
