import random,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("d59b3b840b1fc38cf81682c8597f43f4974b32b2618bac930cdf1aaa8f479fe1b4e1613cf64238285b4a712f6489a41e51be07be5572a30f6d82aafa2a243284c37e7a183e6456849ccf6123a41ab709c2caa10d1498a58d0bd7f4b6115d3a2b58e62bf9d3c6055b88cf557226ac080b75c46456d4acc5822f760a8747bd57fc9faec584c0bbefb3f637f4eb7d1ff521969a398714d13fba8cdbd42118ae28ff381f9a24eecd8b14da396bd32286a6d0df25c589e4cdca4984c4e5473b372e82d1a1fe24d9c419dc2203f2ee652750cecdb88dd8613aa43cf3ea7d62a8e45d92500ced78918bf841648d98be89861c34a259fc531d4509793b16bc2f06383aa072399d231ed154c062ff289e902fe11e46c19faf7a2ce73d00f58745ef4f7c71d838bd53ca98af89fc927b0fbde43726da3c43e5595f5b6ac5de8509846e8550154425b54bf08f117ba62135005fe406a41cc6f10bc1c75f0008a3b134919bec6c3e86b97fcc8b7f6800ab294157a4b3dcb24b4ae5de9611a0d63b92494d60110012bf2bc15207a5e07df431e8256e43b637a04d4319f0cb34ac86111c63579546a9d8594cada5b456ac467837b73c99284d6cf36590cf0c599e||17|198!-!ff33c79742b92ce6bf3cd45621e24a1cd0601abbe23f971223af7f88518ca3e9c7e14aaff7aaaaa76173191d83ce2363226f729ec69d243543033adb4dccf37e9236aa1399ea9ffb1c829e8913f886546fca272aacdc8828fdee053fa92c7f4bcd3bc7f319177b22b2806170df67fa673d864a437ba551459aa15daf3a86175cec8d1c442725897b7745c0ce837a56ff316bed9da7bf0e5de1f56083484cbf5814bd3d4e7777cd2565990db7bae4a15ef841a80636269347c246b7ff3722ba0e57f7c98e25e559907a2ce7af5a911edbb148c8aa5c193e4ea1cf5a632ed591eadd8d17c3b4bc90a048ebe74d0cd50c71620a0a50cd6451e2b0c4d96be164bde168057bd4ca10743c3d11385fcac60de18f700259f71dda74e8e2e2c18c04e5ee41dd06ca45981c573b45d4b292330dc07163eb5f74f0579e169e0936ae327f8a9524d5ef47212dd73c9f125b2e5866b960444cf9dfedcb443fc5b404e138dd8be39eeb7eb0677801b82d5fd01fba948816349df0c734c990d03eb390c365cbb6eee0cce5c40278b9b8d28fe9be3e99dd64adb0b9645e2179fa89aa6285143a6c1451a387d1a74f0e6a9d821029527e97ceadd154e3833578d83b",raw_input("Key : ")))
