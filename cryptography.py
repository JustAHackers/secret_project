####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("270da2ad4d71fbff31ec1ee6408f69b794d8c18119c5737778c95c02772a54848a7ae3900cfaa1cc3fa5c0e4edf37a90705528cef105426bf2493f99fb78e7638bc092811b962d4b62ff51bd4b4757bfeb90c71232a74bdc5e148356a770a20699e9b3e3138958c62eb66db507e0284ce67127698da0cdabbec965ec5f9255fe835085ec208318c5b768f0e973e6bf3deba1577c120bb5a883d4c544bdc36c106431949f4b3c82110fa912b141da32913ac19e8365e0fc484f52c3803379eab6202fd2dc3af82d5bc78d3b13411a2118bfb9841fecd6b7ca0a97799f05b0e4b99729b0cec9e2efe635fb0a7894ad35c0efd11d3d9606bdc04d3d9a15700a1dab12d3706ebfa5867c918877fd664d09a1bfc73dd682bb3ea84dce15675daca1ada4af13608942569d9e98dbcf75ae5993180abdf7f4e0b32248489b18a2b4cf967072ed3c9ceed85837d99d097f7059347d5be32490aded992567b40e86ab7a7810f06a0139c63b74884836396f73d80476ab238d7ca63068fdd5e3f544d60b043d6a7642bea84e21bde19edee766e701039892e59edfdc093f894cf4e377b6c5b0543de66ee3501c8b91738eef439d4569a20bc9333c4ea41f29bc6bf195954887ac4ee9fa250362b92b44c670fff800e0cd25b2b4c489ad1a1530a7bea1e4f5c32713f8eea4d254213c3f5ef779a1b221160387a164bd0886c06e1faa54731733fa8c5c31ef8d685e615190c3bf6980a713189aad9b1757af905db09df2ea3009dae903118f6017829858ee1335eab84c46a216c0721b394e36a3df1d4cc47290ced5513663fce92c369ee7e693be1aaf74bec12e0e5c13694250bd02f96a7fc39e3b50e1783e15b2bb02fc5ffafc574d4ebd6a53337dd8ebbf4b19dbcf9c0a0ea0fdb98cda47dadc29e48a053a6e9d34a07df82e60f469f98b8c9e3ca2786d53c950cf8d8ebf72c1c301bd55fb2176906294dfbb188bae0849e282264f79c45e51a73711de0dc4c9e7e624c5f3785295ea04a573ed20b6fcdfbe8a9036c1da86f8471b4c04edddeaa708efe6335b1339c8a084e8200dbb6a28427050e5aed4d81df0fefab6eb7ed8ab83a8cd648a25131ffbc33c5d4fe5554fd8ffe530c7f6681f2515b3b488093088affe1383ae65dcd50f3ccb221f68cb79415d52ba2f9206eb908fb5b42034bef19b76c0b3b8e8a01721d3e0f10c2750cea1e816cf46f81de76573043940e0b638c9a81cbfb1ffab45949f651c57de824a581e319993a63b2aa13de3359ddcc094bac648ecded364c9f3dfb57c75f193d8e01753c3814b1e05bd0e12cd94d7ad4b5511b696016d907446e590f9d9870c086f118c188f3cc2fae821bd613d8c331c51c6b1787f8c943189ea574a903aa64ba3e8fdb2d5eca3665d75d1d85e2de86fa629117bdb2ec9a43d5c269a6e297eb5b1d6ad5cdd42c4f6d3c4106aba8a2d47a568cf14ba82b875703f8f0f961264938cf71331c6802f40996dec42373f32231c5ab3b21e5494552fe3835f8b9706ab4e672375c6d24b51361b689dfefac8861e291a0c79853aad02085c1bc047fd5f5701bd96f33ebe80c10ad9341a70faceb7cf708823434bf48c17f0814c6f8996ce65abbfc6bbbff0fe5f385981373735307021497756718edd880f503a506412452673aed58dca97f5a3a7c55192ceb2367c79472832d2e07c944271881057f69d9aa58ae34c0885||12|56",key))

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
