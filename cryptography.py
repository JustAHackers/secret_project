####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("66c764c08f3450e2841e527933c18c4afa88e1084c6839e0b71849332af330c81bfa388d9bc005f26d60ece682acac003a87878bd714376abd7e8f7fce4e81655bd23cf3cee04d36ec34ba8c9b935d72725075f093669d0f0cad86214e52e4aa7f358586a4350916b2be6cecdfad33be11573c1164f45cc1606fea86a7532a8157a09da835d748f0|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|17|709",key),locals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
