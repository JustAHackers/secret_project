import random,base64
def hasher(text,length,key):
    random.seed(key) #setting seed for the digest value
    digest_value=random.sample("abcdef1234567890",16) #shuffling the digest value
    random.seed(text) #setting seed for digest result
    result="".join([random.choice(digest_value) for i in range(length)])
    random.seed() #turning back random to normal
    return result #return final result

def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("adaa9958cb32691b498f52615d993a6bb69c1974bc218d84d466dcd60d51f831a9ee6fc77435a1227b8de45822dfd01a7f0f4b6b4a54575e0335c99b89f13ce4f4658e9d147a67564faa7568ac10b07c4addf597263e063707b9aa6cb8c655aaed1892f8258f2ea181bab4beef8a622b9faad8ad3a240537d5a4b4b8a11e53bc9dec42a49a4691f97e98fd927186dbce21e9f0284f35435a3cf296e8f0983ca8e01f8c4d7f6c1a000fac571710aecb57eeac26a342ffab1f1c8526d8c453dbceb9eea658bec795b76a2f64930e67f2ae0d581ab84964b33633ebf1552e675f89b7ac1e2e3d268a230ec321df18a315e82fa401d8bed34cfbe0ff78ed5e2ba8eb67cca3451c953c40a6785e7b88344389efe1db80240458e7e4b7f93e128e7babe9a1d625b4fd5f20d30f7b35618e641c20743e9cb4ef4fa69eb0334014417ec7571e3477708787c22f98d1308549236c4bb3414535ac1024793f83fc935061fbf43d898c7a347fe4471ac51df4fcecd03747be8df7b26f392eda689311fcbb70941d9f4e1fc4e36032d82d2f2f980174a4019d13fe0cd9075ed7423984|==|7|136",raw_input("Key : ")))
