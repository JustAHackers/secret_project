import random,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result


exec (decrypt("826af473e0d65a57ca73b2f635d9c6246186e3743f0f7c2b1b74b0d5566175bc9edd397c83b0b29178eec76adcf6fa201ea7937aae5b1599e7bc7784c22705928ff5c692026e66c3a8c103bd32670e94f74f1b531dd2cd2241dc9df96bd6fde529de2c140f5e9a456377c6be0556d6bce2f85b8363f68934cf673392f0c234fb17d132fdc0a2cdccef9adfda36ddb1323543718460a44123f0ef329efc28eed453487be14a2bdef6faae0d64ecf8ac34c50dedabe86f6c20d0f270ba4b37ee10d5562362749be18de6480c25363e4b211837eb8b664d93da7b0f426745aec5c2a35942348507ca215c0b12caca9d7cea9f67e9ed839fd8279d2ac785e65b34b183bc19ddbcb2cf64d208890596edc3c8f0dc9700f6474476f5bff1fc8cde8e17a8683c072dfad98d04891970007d9b492e508f9936fd6a30a6282bd38bc3f43a39c3d0e27df007a9601acb420ef66621775cc93def137f95f65f05e4e3c8e785e9f6413297cd16318e7afc03eefe2d2250f6ed258b5f3d2cc6f9f2a0975d1fe8bc2581a4750601e7be74150f||9|173",raw_input("Key : ")))
